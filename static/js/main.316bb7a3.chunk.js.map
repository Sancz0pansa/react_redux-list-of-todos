{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["REMOVE","SET","actions","todo","type","payload","currentTodoReducer","state","action","FILTER","ISDONE","query","filterBy","initialState","status","filterReducer","filter","LOAD","todos","todosReducer","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","modalTodo","allTodos","length","className","text","isDone","todosToFilter","title","includes","completed","filterTodos","map","id","onClick","handleSelect","TodoFilter","onSubmit","event","preventDefault","onChange","e","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","useEffect","isMounted","fetchData","a","userId","person","console","error","href","email","name","App","handleLoadTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.316bb7a3.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\nconst REMOVE = 'currentTodo/REMOVE';\nconst SET = 'currentTodo/SET';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: REMOVE });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: SET,\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case SET:\n      return action.payload;\n    case REMOVE:\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\nconst FILTER = 'filter/query';\nconst ISDONE = 'filter/isdone';\n\ntype QueryAction = {\n  type: 'filter/query';\n  payload: string;\n};\n\ntype IsDoneAction = {\n  type: 'filter/isdone';\n  payload: Status;\n};\n\nconst isDoneAction = (filterBy: Status): IsDoneAction => ({\n  type: ISDONE,\n  payload: filterBy,\n});\n\nconst queryAction = (query: string): QueryAction => ({\n  type: FILTER,\n  payload: query,\n});\n\nexport const actions = { queryAction, isDoneAction };\n\ntype Action = QueryAction | IsDoneAction;\n\nconst initialState = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (filter = initialState, action: Action) => {\n  switch (action.type) {\n    case FILTER:\n      return {\n        ...filter,\n        query: action.payload,\n      };\n    case ISDONE:\n      return {\n        ...filter,\n        status: action.payload,\n      };\n    default:\n      return filter;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\nconst LOAD = 'todos/load';\n\ntype LoadAction = {\n  type: 'todos/load';\n  payload: Todo[];\n};\n\nconst loadTodos = (todos: Todo[]): LoadAction => ({\n  type: 'todos/load',\n  payload: todos,\n});\n\ntype Action = LoadAction;\n\nexport const actions = {\n  loadTodos,\n};\n\nconst initialState: Todo[] = [];\n\nconst todosReducer = (todos = initialState, action: Action): Todo[] => {\n  switch (action.type) {\n    case LOAD:\n      return action.payload;\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const modalTodo = useAppSelector(state => state.currentTodo);\n  const allTodos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const filterTodos = (text: string, isDone: string, todos: Todo[]) => {\n    let todosToFilter = [...todos];\n\n    if (text) {\n      todosToFilter = todosToFilter.filter(todo => todo.title.includes(text));\n    }\n\n    switch (isDone) {\n      case 'all':\n        return todosToFilter;\n      case 'active':\n        return todosToFilter.filter(todo => todo.completed === false);\n      case 'completed':\n        return todosToFilter.filter(todo => todo.completed === true);\n      default:\n        return todosToFilter;\n    }\n  };\n\n  const handleSelect = (todo: Todo) => {\n    dispatch(actions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {allTodos.length > 0 ? (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filterTodos(query, status, allTodos).map(todo => (\n              <tr key={todo.id} data-cy=\"todo\">\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                  {' '}\n\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={todo.completed\n                    ? 'has-text-success' : 'has-text-danger'}\n                  >\n                    {todo.title}\n\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    onClick={() => handleSelect(todo)}\n                    type=\"button\"\n                  >\n                    <span className=\"icon\">\n                      {modalTodo === todo\n                        ? <i className=\"far fa-eye-slash\" />\n                        : <i className=\"far fa-eye\" />}\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n\n          </tbody>\n        </table>\n      ) : (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { query } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const handleSelectStatus = (isDone: Status) => {\n    dispatch(actions.isDoneAction(isDone));\n  };\n\n  const handleQuery = (text: string) => {\n    dispatch(actions.queryAction(text));\n  };\n\n  const handleClearQuery = () => {\n    dispatch(actions.queryAction(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            onChange={(e) => handleSelectStatus(e.target.value as Status)}\n            data-cy=\"statusSelect\"\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          onChange={(e) => handleQuery(e.target.value)}\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          value={query}\n          placeholder=\"Search...\"\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query.length > 0 && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              onClick={() => handleClearQuery()}\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const [user, setUser] = useState<User | null>(null);\n  const modalTodo = useAppSelector((state) => state.currentTodo);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    const fetchData = async () => {\n      try {\n        if (modalTodo?.userId) {\n          const person = await getUser(modalTodo.userId);\n\n          if (isMounted) {\n            setUser(person);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching user:', error);\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [modalTodo]);\n\n  const handleClose = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {user ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${modalTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => handleClose()}\n              data-cy=\"modal-close\"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{modalTodo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n\n              {modalTodo?.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      ) : <Loader />}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const modalTodo = useAppSelector(state => state.currentTodo);\n  const allTodos = useAppSelector(state => state.todos);\n  const dispatch = useAppDispatch();\n  const handleLoadTodos = async () => {\n    const todos = await getTodos();\n\n    dispatch(await actions.loadTodos(todos));\n  };\n\n  useEffect(() => {\n    handleLoadTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {allTodos.length > 0 ? <TodoList /> : <Loader /> }\n\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {modalTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}